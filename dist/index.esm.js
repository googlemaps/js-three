import{Vector3 as t,MathUtils as e,Quaternion as r,Matrix4 as n,Raycaster as s,Scene as a,PerspectiveCamera as i,Euler as o,WebGLRenderer as h,PCFSoftShadowMap as d,sRGBEncoding as l,HemisphereLight as c,DirectionalLight as y}from"three";const{atan:p,cos:u,exp:g,log:v,tan:w,PI:m}=Math,{degToRad:x,radToDeg:A}=e,M=6371010,b=Math.PI*M;function L(t){return window.google&&google.maps&&(t instanceof google.maps.LatLng||t instanceof google.maps.LatLngAltitude)?{altitude:0,...t.toJSON()}:{altitude:0,...t}}function f(e,r,n=new t){const[s,a]=S(e),[i,o]=S(r);return n.set(s-i,a-o,0),n.multiplyScalar(u(x(r.lat))),n.z=e.altitude-r.altitude,n}function S(t){return[M*x(t.lng),M*v(w(.25*m+.5*x(t.lat)))]}function C(t){const[e,r]=t;return{lat:A(.5*m-2*p(g(-r/M))),lng:A(e)/M}}const D=new t(0,0,1);class R{constructor(t={}){this.animationMode="ondemand",this.rotationArray=new Float32Array(3),this.rotationInverse=new r,this.projectionMatrixInverse=new n,this.raycaster=new s;const{anchor:e={lat:0,lng:0,altitude:0},upAxis:o="Z",scene:h,map:d,animationMode:l="ondemand",addDefaultLighting:c=!0}=t;this.overlay=new google.maps.WebGLOverlayView,this.renderer=null,this.camera=null,this.animationMode=l,this.setAnchor(e),this.setUpAxis(o),this.scene=h??new a,c&&this.initSceneLights(),this.overlay.onAdd=this.onAdd.bind(this),this.overlay.onRemove=this.onRemove.bind(this),this.overlay.onContextLost=this.onContextLost.bind(this),this.overlay.onContextRestored=this.onContextRestored.bind(this),this.overlay.onStateUpdate=this.onStateUpdate.bind(this),this.overlay.onDraw=this.onDraw.bind(this),this.camera=new i,d&&this.setMap(d)}setAnchor(t){this.anchor=L(t)}setUpAxis(n){const s=new t(0,0,1);"string"!=typeof n?s.copy(n):"y"===n.toLowerCase()?s.set(0,1,0):"z"!==n.toLowerCase()&&console.warn(`invalid value '${n}' specified as upAxis`),s.normalize();const a=new r;a.setFromUnitVectors(s,D),this.rotationInverse.copy(a).invert();const i=(new o).setFromQuaternion(a,"XYZ");this.rotationArray[0]=e.radToDeg(i.x),this.rotationArray[1]=e.radToDeg(i.y),this.rotationArray[2]=e.radToDeg(i.z)}raycast(t,e,r={}){let n;Array.isArray(e)?n=e||null:(n=[this.scene],r={...e,recursive:!0});const{updateMatrix:s=!0,recursive:a=!1,raycasterParameters:i}=r;s&&this.projectionMatrixInverse.copy(this.camera.projectionMatrix).invert(),this.raycaster.ray.origin.set(t.x,t.y,0).applyMatrix4(this.projectionMatrixInverse),this.raycaster.ray.direction.set(t.x,t.y,.5).applyMatrix4(this.projectionMatrixInverse).sub(this.raycaster.ray.origin).normalize();const o=this.raycaster.params;i&&(this.raycaster.params=i);const h=this.raycaster.intersectObjects(n,a);return this.raycaster.params=o,h}onStateUpdate(t){}onAdd(){}onBeforeDraw(){}onRemove(){}requestStateUpdate(){this.overlay.requestStateUpdate()}requestRedraw(){this.overlay.requestRedraw()}getMap(){return this.overlay.getMap()}setMap(t){this.overlay.setMap(t)}addListener(t,e){return this.overlay.addListener(t,e)}onContextRestored({gl:t}){this.renderer=new h({canvas:t.canvas,context:t,...t.getContextAttributes()}),this.renderer.autoClear=!1,this.renderer.autoClearDepth=!1,this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=d,this.renderer.outputEncoding=l;const{width:e,height:r}=t.canvas;this.renderer.setViewport(0,0,e,r)}onContextLost(){this.renderer&&(this.renderer.dispose(),this.renderer=null)}onDraw({gl:t,transformer:e}){this.camera.projectionMatrix.fromArray(e.fromLatLngAltitude(this.anchor,this.rotationArray)),t.disable(t.SCISSOR_TEST),this.onBeforeDraw(),this.renderer.render(this.scene,this.camera),this.renderer.resetState(),"always"===this.animationMode&&this.requestRedraw()}latLngAltitudeToVector3(e,r=new t){return f(L(e),this.anchor,r),r.applyQuaternion(this.rotationInverse),r}bindTo(t,e,r,n){this.overlay.bindTo(t,e,r,n)}get(t){return this.overlay.get(t)}notify(t){this.overlay.notify(t)}set(t,e){this.overlay.set(t,e)}setValues(t){this.overlay.setValues(t)}unbind(t){this.overlay.unbind(t)}unbindAll(){this.overlay.unbindAll()}initSceneLights(){const t=new c(16777215,4473924,1);t.position.set(0,-.2,1).normalize();const e=new y(16777215);e.position.set(0,10,100),this.scene.add(t,e)}}export{M as EARTH_RADIUS,R as ThreeJSOverlayView,b as WORLD_SIZE,f as latLngToVector3Relative,S as latLngToXY,L as toLatLngAltitudeLiteral,C as xyToLatLng};
//# sourceMappingURL=index.esm.js.map
